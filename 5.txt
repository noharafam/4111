import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from math import exp
df=pd.read_csv("D:\Sem 6\DSBDA Pract\Social_Network_Ads.csv")
df.head()

[2]: df.describe()

plt.scatter(df['Age'],df['Purchased'])
plt.xlabel("age")
plt.ylabel("purchased")
plt.show()
#Train and test the dataset
X_train,X_test,y_train,y_test=train_test_split(df['Age'],df['Purchased'],test_size=0.20)


from sklearn.linear_model import LogisticRegression
# Create an Instance and fit the model
model=LogisticRegression()
model.fit(X_train.values.reshape(-1,1),y_train.values.reshape(-1,1).ravel())
#making predictions
y_pred_sk = model.predict(X_test.values.reshape(-1, 1))
plt.clf()
plt.scatter(X_test,y_test)
plt.scatter(X_test, y_pred_sk,c="red")
plt.xlabel("age")
plt.ylabel("purchased")
plt.show()
#Accuracy
print(f"Accuracy ={model.score(X_test.values.reshape(-1,1),y_test.values.reshape(-1,1))}")



from sklearn.metrics import confusion_matrix
tn,fp,fn,tp=confusion_matrix(y_test,y_pred_sk).ravel()
print("True Negatives: ",tn)
print("False Positives: ",fp)
print("False Negatives: ",fn)
print("True Positives: ",tp)

# Accuracy
Accuracy=(tn+tp)*100/(tp+tn+fp+fn)
print("Accuracy {:0.2f}%:".format(Accuracy))


 #Precision
Precision = tp/(tp+fp)
print("Precision {:0.2f}".format(Precision))


 #Recall
Recall = tp/(tp+fn)
print("Recall {:0.2f}".format(Recall))


 #Error rate
err = (fp + fn)/(tp + tn + fn + fp)
print("Error rate {:0.2f}".format(err))
